/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AcceptInvitationInvitationIdIndexImport } from './routes/accept-invitation/$invitationId/index'
import { Route as AuthenticatedTeamsIndexImport } from './routes/_authenticated/teams/index'
import { Route as AuthenticatedTeamsAddMemberImport } from './routes/_authenticated/teams/add-member'
import { Route as AuthenticatedTeamsTeamIdImport } from './routes/_authenticated/teams/$teamId'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AcceptInvitationInvitationIdIndexRoute =
  AcceptInvitationInvitationIdIndexImport.update({
    id: '/accept-invitation/$invitationId/',
    path: '/accept-invitation/$invitationId/',
    getParentRoute: () => rootRoute,
  } as any)

const AuthenticatedTeamsIndexRoute = AuthenticatedTeamsIndexImport.update({
  id: '/teams/',
  path: '/teams/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedTeamsAddMemberRoute =
  AuthenticatedTeamsAddMemberImport.update({
    id: '/teams/add-member',
    path: '/teams/add-member',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedTeamsTeamIdRoute = AuthenticatedTeamsTeamIdImport.update({
  id: '/teams/$teamId',
  path: '/teams/$teamId',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/teams/$teamId': {
      id: '/_authenticated/teams/$teamId'
      path: '/teams/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof AuthenticatedTeamsTeamIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/teams/add-member': {
      id: '/_authenticated/teams/add-member'
      path: '/teams/add-member'
      fullPath: '/teams/add-member'
      preLoaderRoute: typeof AuthenticatedTeamsAddMemberImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/teams/': {
      id: '/_authenticated/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthenticatedTeamsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/accept-invitation/$invitationId/': {
      id: '/accept-invitation/$invitationId/'
      path: '/accept-invitation/$invitationId'
      fullPath: '/accept-invitation/$invitationId'
      preLoaderRoute: typeof AcceptInvitationInvitationIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedTeamsTeamIdRoute: typeof AuthenticatedTeamsTeamIdRoute
  AuthenticatedTeamsAddMemberRoute: typeof AuthenticatedTeamsAddMemberRoute
  AuthenticatedTeamsIndexRoute: typeof AuthenticatedTeamsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedTeamsTeamIdRoute: AuthenticatedTeamsTeamIdRoute,
  AuthenticatedTeamsAddMemberRoute: AuthenticatedTeamsAddMemberRoute,
  AuthenticatedTeamsIndexRoute: AuthenticatedTeamsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/teams/add-member': typeof AuthenticatedTeamsAddMemberRoute
  '/teams': typeof AuthenticatedTeamsIndexRoute
  '/accept-invitation/$invitationId': typeof AcceptInvitationInvitationIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/teams/add-member': typeof AuthenticatedTeamsAddMemberRoute
  '/teams': typeof AuthenticatedTeamsIndexRoute
  '/accept-invitation/$invitationId': typeof AcceptInvitationInvitationIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/_authenticated/teams/$teamId': typeof AuthenticatedTeamsTeamIdRoute
  '/_authenticated/teams/add-member': typeof AuthenticatedTeamsAddMemberRoute
  '/_authenticated/teams/': typeof AuthenticatedTeamsIndexRoute
  '/accept-invitation/$invitationId/': typeof AcceptInvitationInvitationIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/auth/login'
    | '/teams/$teamId'
    | '/teams/add-member'
    | '/teams'
    | '/accept-invitation/$invitationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/auth/login'
    | '/teams/$teamId'
    | '/teams/add-member'
    | '/teams'
    | '/accept-invitation/$invitationId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/auth/login'
    | '/_authenticated/teams/$teamId'
    | '/_authenticated/teams/add-member'
    | '/_authenticated/teams/'
    | '/accept-invitation/$invitationId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AcceptInvitationInvitationIdIndexRoute: typeof AcceptInvitationInvitationIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AcceptInvitationInvitationIdIndexRoute:
    AcceptInvitationInvitationIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/auth/login",
        "/accept-invitation/$invitationId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/teams/$teamId",
        "/_authenticated/teams/add-member",
        "/_authenticated/teams/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/_authenticated/teams/$teamId": {
      "filePath": "_authenticated/teams/$teamId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/teams/add-member": {
      "filePath": "_authenticated/teams/add-member.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/teams/": {
      "filePath": "_authenticated/teams/index.tsx",
      "parent": "/_authenticated"
    },
    "/accept-invitation/$invitationId/": {
      "filePath": "accept-invitation/$invitationId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
